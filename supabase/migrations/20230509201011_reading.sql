drop policy "Enable read access to authenticated users for corresponding pat" on "public"."patient";

create table "public"."medication" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "date" timestamp with time zone not null,
    "amount" smallint not null,
    "patient" bigint not null
);


alter table "public"."medication" enable row level security;

create table "public"."reading" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "patient" bigint not null,
    "iop" smallint not null,
    "date" timestamp with time zone not null
);


alter table "public"."reading" enable row level security;

CREATE UNIQUE INDEX medication_pkey ON public.medication USING btree (id);

CREATE UNIQUE INDEX reading_pkey ON public.reading USING btree (id);

alter table "public"."medication" add constraint "medication_pkey" PRIMARY KEY using index "medication_pkey";

alter table "public"."reading" add constraint "reading_pkey" PRIMARY KEY using index "reading_pkey";

alter table "public"."medication" add constraint "medication_patient_fkey" FOREIGN KEY (patient) REFERENCES patient(id) ON DELETE CASCADE not valid;

alter table "public"."medication" validate constraint "medication_patient_fkey";

alter table "public"."reading" add constraint "reading_patient_fkey" FOREIGN KEY (patient) REFERENCES patient(id) ON DELETE CASCADE not valid;

alter table "public"."reading" validate constraint "reading_patient_fkey";

create policy "Enable read access for all users"
on "public"."medication"
as permissive
for all
to authenticated
using ((auth.uid() = ( SELECT patient."user"
   FROM patient
  WHERE (medication.patient = patient.id))))
with check (true);


create policy "Doctors can read their own patients only"
on "public"."patient"
as permissive
for select
to authenticated
using ((auth.uid() = "user"));


create policy "Doctors can perform all on own patient readings only"
on "public"."reading"
as permissive
for all
to authenticated
using ((auth.uid() = ( SELECT patient."user"
   FROM patient
  WHERE (reading.patient = patient.id))))
with check (true);



