create table "public"."patient" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name_last" text,
    "name_first" text,
    "dob" date,
    "case_date" date,
    "od_os" text[],
    "user" uuid default auth.uid()
);


alter table "public"."patient" enable row level security;

create table "public"."reading" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "patient" bigint not null,
    "iop" smallint not null,
    "date" timestamp with time zone not null,
    "medication" smallint not null
);


alter table "public"."reading" enable row level security;

CREATE UNIQUE INDEX patient_pkey ON public.patient USING btree (id);

CREATE UNIQUE INDEX reading_pkey ON public.reading USING btree (id);

alter table "public"."patient" add constraint "patient_pkey" PRIMARY KEY using index "patient_pkey";

alter table "public"."reading" add constraint "reading_pkey" PRIMARY KEY using index "reading_pkey";

alter table "public"."patient" add constraint "patient_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."patient" validate constraint "patient_user_fkey";

alter table "public"."reading" add constraint "reading_patient_fkey" FOREIGN KEY (patient) REFERENCES patient(id) ON DELETE CASCADE not valid;

alter table "public"."reading" validate constraint "reading_patient_fkey";

create policy "Doctors can read their own patients only"
on "public"."patient"
as permissive
for select
to authenticated
using ((auth.uid() = "user"));


create policy "Enable write access for authenticated users"
on "public"."patient"
as permissive
for insert
to authenticated
with check (true);


create policy "Doctors can perform all on own patient readings only"
on "public"."reading"
as permissive
for all
to authenticated
using ((auth.uid() = ( SELECT patient."user"
   from patient
  WHERE (reading.patient = patient.id))))
with check (true);



